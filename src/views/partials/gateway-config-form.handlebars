<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <h5 class="mb-0 me-3">
                <i class="fas fa-cog me-2"></i>
                Gateway Configuration
            </h5>
            <div class="d-flex align-items-center">
                <span class="me-2"><strong>Total Weight:</strong></span>
                <span id="totalWeight" class="me-2">0</span>
                <span class="me-3">%</span>
                <div class="progress me-3" style="width: 100px; height: 6px;">
                    <div id="weightProgressBar" class="progress-bar" role="progressbar" style="width: 0%"></div>
                </div>
            </div>
        </div>
        <button type="submit" class="btn btn-primary" id="updateConfigBtn" form="gatewayConfigForm">
            <i class="fas fa-save me-2"></i>
            Update Configuration
        </button>
    </div>
    <div class="card-body">
        <form id="gatewayConfigForm">
            <div id="gatewayConfigs">
                <!-- Gateway configuration fields will be dynamically populated here -->
            </div>
        </form>
    </div>
</div>

<style>
.gateway-config-card {
    border: 1px solid #dee2e6;
    border-radius: 0.375rem;
    padding: 0.75rem;
    background-color: #f8f9fa;
    height: 100%;
}

.config-fields {
    margin-top: 0.5rem;
}

.config-field {
    margin-bottom: 0.5rem;
}

.config-field label {
    font-weight: 600;
    font-size: 0.75rem;
    color: #495057;
    margin-bottom: 0.125rem;
    display: block;
}

.config-field input {
    border-radius: 0.25rem;
    border: 1px solid #ced4da;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    width: 100%;
}

.config-field input:focus {
    border-color: #80bdff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.weight-warning {
    color: #dc3545;
    font-size: 0.75rem;
    margin-top: 0.25rem;
}

.weight-success {
    color: #198754;
    font-size: 0.75rem;
    margin-top: 0.25rem;
}

.gateway-name {
    font-weight: 700;
    color: #212529;
    margin-bottom: 0.375rem;
    padding-bottom: 0.375rem;
    border-bottom: 1px solid #dee2e6;
    text-align: center;
    font-size: 1rem;
}

.progress {
    background-color: #e9ecef;
}

.progress-bar {
    background-color: #198754;
    transition: width 0.3s ease;
}

.progress-bar.warning {
    background-color: #ffc107;
}

.progress-bar.danger {
    background-color: #dc3545;
}
</style>

<script>
// Gateway configuration form functionality
let currentGatewayConfigs = [];

// Load current gateway configurations
async function loadGatewayConfigs() {
    try {
        const response = await axios.get('/api/gateways/configs');
        currentGatewayConfigs = response.data.gateway_configs;
        renderGatewayConfigForm();
    } catch (error) {
        console.error('Failed to load gateway configurations:', error);
        addGatewayLog(`ERROR: Failed to load gateway configurations - ${error.response?.data?.message || error.message}`);
    }
}

// Render the gateway configuration form
function renderGatewayConfigForm() {
    const container = document.getElementById('gatewayConfigs');
    
    if (!container) {
        console.error('Gateway configs container not found');
        return;
    }
    
    container.innerHTML = `
        <div class="row">
            ${currentGatewayConfigs.map((config, index) => `
                <div class="col-lg-4 col-md-6 mb-2">
                    <div class="gateway-config-card">
                        <div class="gateway-name">
                            <i class="fas fa-credit-card me-2"></i>
                            ${config.name}
                        </div>
                        <div class="config-fields">
                            <div class="row">
                                <div class="col-6">
                                    <div class="config-field">
                                        <label for="weight_${index}">Weight (%)</label>
                                        <input type="number" 
                                               id="weight_${index}" 
                                               name="weight_${index}" 
                                               value="${config.weight}" 
                                               min="0" 
                                               max="100" 
                                               step="1"
                                               class="form-control form-control-sm weight-input"
                                               data-index="${index}"
                                               onchange="updateTotalWeight()">
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="config-field">
                                        <label for="success_threshold_${index}">Success Threshold</label>
                                        <input type="number" 
                                               id="success_threshold_${index}" 
                                               name="success_threshold_${index}" 
                                               value="${config.success_threshold}" 
                                               min="0" 
                                               max="1" 
                                               step="0.1"
                                               class="form-control form-control-sm">
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-6">
                                    <div class="config-field">
                                        <label for="min_requests_${index}">Min Requests</label>
                                        <input type="number" 
                                               id="min_requests_${index}" 
                                               name="min_requests_${index}" 
                                               value="${config.min_requests}" 
                                               min="1" 
                                               step="1"
                                               class="form-control form-control-sm">
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="config-field">
                                        <label for="disable_duration_${index}">Disable Duration (min)</label>
                                        <input type="number" 
                                               id="disable_duration_${index}" 
                                               name="disable_duration_${index}" 
                                               value="${config.disable_duration_minutes}" 
                                               min="1" 
                                               step="1"
                                               class="form-control form-control-sm">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('')}
        </div>
    `;
    
    updateTotalWeight();
}

// Update total weight calculation
function updateTotalWeight() {
    const weightInputs = document.querySelectorAll('.weight-input');
    let totalWeight = 0;
    
    weightInputs.forEach(input => {
        const weight = parseInt(input.value) || 0;
        totalWeight += weight;
    });
    
    const totalWeightElement = document.getElementById('totalWeight');
    const progressBar = document.getElementById('weightProgressBar');
    
    if (totalWeightElement) {
        totalWeightElement.textContent = totalWeight;
    }
    
    if (progressBar) {
        progressBar.style.width = `${totalWeight}%`;
        
        // Update progress bar color based on total weight
        progressBar.classList.remove('warning', 'danger');
        if (totalWeight > 100) {
            progressBar.classList.add('danger');
        } else if (totalWeight > 90) {
            progressBar.classList.add('warning');
        }
    }
    
    // Update form validation
    const submitBtn = document.getElementById('updateConfigBtn');
    if (submitBtn) {
        submitBtn.disabled = totalWeight > 100;
    }
}

// Handle form submission
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('gatewayConfigForm');
    if (form) {
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const submitBtn = document.getElementById('updateConfigBtn');
            const originalText = submitBtn.innerHTML;
            
            try {
                // Show loading state
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Updating...';
                
                // Collect form data
                const configs = [];
                const weightInputs = document.querySelectorAll('.weight-input');
                
                weightInputs.forEach((input, index) => {
                    const gatewayName = currentGatewayConfigs[index].name;
                    const weight = parseInt(input.value) || 0;
                    const successThreshold = parseFloat(document.getElementById(`success_threshold_${index}`).value) || 0.9;
                    const minRequests = parseInt(document.getElementById(`min_requests_${index}`).value) || 10;
                    const disableDuration = parseInt(document.getElementById(`disable_duration_${index}`).value) || 30;
                    
                    configs.push({
                        name: gatewayName,
                        weight: weight,
                        success_threshold: successThreshold,
                        min_requests: minRequests,
                        disable_duration_minutes: disableDuration
                    });
                });
                
                // Validate total weight
                const totalWeight = configs.reduce((sum, config) => sum + config.weight, 0);
                if (totalWeight > 100) {
                    throw new Error(`Total gateway weights (${totalWeight}%) cannot exceed 100%`);
                }
                
                // Send update request
                const response = await axios.post('/api/gateways/configs', {
                    gateway_configs: configs
                });
                
                console.log('Gateway configuration updated:', response.data);
                addGatewayLog(`Gateway configurations updated successfully - Total weight: ${totalWeight}%`);
                
                // Debug: Log the updated configurations
                console.log('Updated configurations:', configs);
                
                // Show success message
                alert(`✅ Gateway configurations updated successfully!\n\nTotal weight: ${totalWeight}%\nGateways: ${configs.map(c => c.name).join(', ')}`);
                
                // Refresh gateway cards to show updated configurations
                setTimeout(() => {
                    refreshTables();
                }, 100);
                
                // Force immediate refresh of gateway cards
                setTimeout(() => {
                    refreshTables();
                }, 1000);
                
            } catch (error) {
                console.error('Failed to update gateway configurations:', error);
                
                let errorMessage = 'Failed to update gateway configurations';
                if (error.response?.data?.message) {
                    errorMessage = error.response.data.message;
                } else if (error.message) {
                    errorMessage = error.message;
                }
                
                alert(`❌ ${errorMessage}`);
                addGatewayLog(`ERROR: Gateway configuration update failed - ${errorMessage}`);
                
            } finally {
                // Restore button state
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        });
    }
    
    // Load initial configurations
    loadGatewayConfigs();
});
</script> 